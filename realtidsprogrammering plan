Camera - Server:

Threads:

takePicture:

has access to the camera monitor and uses mode to determine frequency of picture taking.
Stores the images in a buffer in the monitor.
Holds a variable (static?) which determines the wait time between images in idle mode.


sendPicture:

accesses picture buffer in monitor, wraps in package for sending over network, and sends.
No logic concerning mode, sends asap.


updateMode:

waits for data packet from the client to set the mode in the cameraMonitor.


cameraMonitor:

methods for setMode, getImage and putImage. All these methods should be synchronized.
the sendPicture thread might not be notified until buffer is full during movie mode to promote efficiency.


motionSensor:

a thread called from the client in order to check for motion, sends back motion data to client via http.



Client:


MotionCtrl:
Periodically checks the MotionSensor thread and receives motion data in return. Updates mode in the ClientMonitor.

SendMode:
waits for update of mode in ClientMonitor and sends to UpdateMode thread in camera.

PictureReceiver:
waits for new picture from sedPicture thread in camera. Stores pictures from both cameras in a common buffer, in the ClientMonitor.

Display:
periodically updates the DisplayMonitor depending on the frequency of received pictures. Does not consider mode per se, instead uses time stamps of pictures to determine synchronous or asynchronous mode.
There are two Display threads, one for each camera. Getting pictures from there respective buffers. While in synchronous mode sleeps the required time. While in asynchronous mode, does not sleep, sends to DisplayMonitor immediately. The display thread notifies the GUI that a new picture is available.


Input:
sets mode regardless of motion in cameras.

ClientMonitor:
holds methods for setting and getting mode, and a buffer for each camera storing pictures.

DisplayMonitor:
holds references to two pictures, one for each camera. Updated by the two display threads. Read by the GUI thread. The methods for access are synchronized. These images are shown in the GUI.

GUI:

the GUI.



From picture to display - data flow:

picture is taken in the TakePicture thread.
Picture is stored in the buffer of the CameraMonitor - notify
SendPicture is notified and packs the picture with data (camera, timestamp, image size, image data) and sends via TCP
PictureReceiver waits for picture from SendPicture. Gets image, saves in buffer in ClientMonitor.
Display thread takes from the picture buffer ASAP. Depending on camera and frequency the pictures are displayed in different ways.

updating mode - data flow:

Periodically the MotionsCtrl thread requests info from MotionSensor thread via http, which informs the system of motion.
MotionCtrl sets mode in ClientMonitor, notify.
SendMode is notified and sends the mode update via TCP to the updateMode thread in camera.
UpdateMode updates mode in the CameraMonitor.

Display








Packets:

Picture packet:

Time stamp      no of bits: TBD
size            no of bits: TBD
data            no of bits: determined by size



mode packet:

a single bit representing the mode:
    1 - movie
    0 - idle



http communication:

existing protocol.
